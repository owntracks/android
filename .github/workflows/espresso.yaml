---
name: "Subflow: Espresso tests"
"on":
  workflow_call:
    inputs:
      ref:
        required: true
        type: string

jobs:
  espresso-test:
    name: "Espresso tests"
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write
    strategy:
      fail-fast: false
      matrix:
        android-api: [31]
        flavour: [Gms, Oss]
        shard: [1, 2, 3, 4, 5, 6]
    steps:
      - name: Enable KVM group perms
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm
      - name: Remove unused things
        run: |
          sudo rm -rf /opt/ghc # Haskell
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          sudo rm -rf /usr/share/dotnet
          sudo docker image prune --all --force
          sudo df -h

      # Github charges us for LFS bandwidth, so let's use the cache
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4
        with:
          lfs: false
          ref: ${{ inputs.ref }}
      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id
      - name: Restore LFS cache
        uses: actions/cache@v4
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}-v1
      - name: Git LFS Pull
        run: git lfs pull

      - uses: actions/setup-java@c5195efecf7bdfc987ee8bae7a71cb8b11521c00 # v4
        with:
          distribution: "temurin" # See 'Supported distributions' for available options
          java-version: "21"
      - name: Gradle setup
        uses: gradle/actions/setup-gradle@v4
        with:
          dependency-graph: generate
          cache-encryption-key: ${{ secrets.GradleEncryptionKey }}
      - name: AVD cache
        uses: actions/cache@v4
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: owntracks-test-${{ matrix.android-api }}-${{ matrix.flavour }}
      - name: Create AVD and generate snapshot for caching
        timeout-minutes: 10
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.android-api }}
          force-avd-creation: false
          emulator-options: -no-window -gpu auto -noaudio -no-boot-anim -camera-back none -camera-front none -memory 6000
          profile: pixel_3a
          target: ${{ matrix.flavour == 'Gms' && 'google_apis' || 'default' }}
          ram-size: 6000M
          avd-name: owntracks-test-${{ matrix.android-api }}-${{ matrix.flavour }}
          disable-animations: true
          arch: x86_64
          cores: 2
          sdcard-path-or-size: 1000M
          script: |
            echo "Created AVD snapshot"
      - name: Espresso Test
        uses: reactivecircus/android-emulator-runner@v2
        timeout-minutes: 30
        env:
          FLAVOUR: ${{ matrix.flavour }}
          SHARD_COUNT: 6
          SHARD_INDEX: ${{ matrix.shard }}
          GRADLE_OPTS: "-Dorg.gradle.daemon=true -Dorg.gradle.configuration-cache=true -Dorg.gradle.parallel=true -Dorg.gradle.caching=true -Dorg.gradle.jvmargs='-Xmx3096M -Dkotlin.daemon.jvm.options=-Xmx2048M -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8 -XX:+UseParallelGC'"
        with:
          api-level: ${{ matrix.android-api }}
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu auto -noaudio -no-boot-anim -camera-back none -camera-front none -memory 6000
          profile: pixel_3a
          target: ${{ matrix.flavour == 'Gms' && 'google_apis' || 'default' }}
          ram-size: 6000M
          disable-animations: true
          avd-name: owntracks-test-${{ matrix.android-api }}-${{ matrix.flavour }}
          arch: x86_64
          cores: 2
          sdcard-path-or-size: 1000M
          script: |
            adb shell settings put global bluetooth_on 0
            adb shell settings put secure long_press_timeout 1000
            adb shell rm -rf /sdcard/googletest || echo "Couldn't delete googletest folder"
            adb uninstall org.owntracks.android.debug || echo "org.owntracks.android not installed"
            adb uninstall org.owntracks.android.debug.test || echo "org.owntracks.android.test not installed"
            ./project/gradlew -p project :app:create${FLAVOUR}DebugAndroidTestCoverageReport -Pandroid.testInstrumentationRunnerArguments.numShards=${SHARD_COUNT} -Pandroid.testInstrumentationRunnerArguments.shardIndex=${SHARD_INDEX} --max-workers=1 --scan
      - name: Upload connected test result artifact
        uses: actions/upload-artifact@v4
        with:
          name: espresso-test-reports-${{ matrix.android-api }}-${{ matrix.flavour }}-${{ matrix.shard }}
          path: ./project/app/build/reports/androidTests/connected/

      - name: Espresso JUnit Report
        uses: mikepenz/action-junit-report@v5
        if: always()
        with:
          report_paths: "**/TEST-*.xml"
          detailed_summary: true
          include_passed: false
      - name: Upload connected test coverage artifact
        uses: ./.github/actions/upload-artifact
        with:
          name: espresso-test-coverage-${{ matrix.android-api }}-${{ matrix.flavour }}-${{ matrix.shard }}
          path: ./project/app/build/reports/coverage/androidTest/
      - name: Upload coverage
        uses: codecov/codecov-action@v5
        with:
          files: ./project/app/build/reports/coverage/androidTest/${{ matrix.flavour == 'Gms' && 'gms' || 'oss' }}/debug/connected/report.xml
          flags: uitests
          token: ${{ secrets.CODECOV_TOKEN }}
